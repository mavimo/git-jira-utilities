#!/usr/bin/env python
import re
import os
import sys
import getopt
import subprocess

import ConfigParser
from jira.client import JIRA

def config():
    config = ConfigParser.ConfigParser()
    config.read(['.jira.cfg', os.path.expanduser('~/.jira.cfg')])
    return {
        'JIRA' : {
            'hostname': config.get('JIRA', 'hostname'),
            'username': config.get('JIRA', 'username'),
            'password': config.get('JIRA', 'password')
        },
        'pattern': {
            'branch': config.get('Pattern', 'branch', 1),
            'message': config.get('Pattern', 'message', 1),
        }
    }

def main(argv):
    # Check arguments
    if len(sys.argv[1:]) != 1:
        print 'git ee 3600'
        sys.exit(2)

    # Load configuration
    cfg = config()

    # Get issue ID
    issue_id = sys.argv[1]

    # Configuration
    options = {
        'server': cfg['JIRA']['hostname']
    }

    # Connect to jira
    try:
        jira = JIRA(options, basic_auth=(cfg['JIRA']['username'], cfg['JIRA']['password']), validate=True)
    except Exception, e:
        print "Error occured, are you sure you can connect to JIRA server?"
        sys.exit(5)

    # Branch naming pattern
    branch = cfg['pattern']['branch']

    try:
        # Get issue information
        issue = jira.issue(issue_id)

        # Extract items from issue info
        story_name = issue.fields.summary

        # Print report on specified issue
        print " "
        print " .------------------------------------------------------------------------------"
        print " | Link     : " + cfg['JIRA']['hostname'] + '/browse/' + issue.key
        print " | Type     : " + issue.fields.issuetype.name
        print " | Priority : " + issue.fields.priority.name
        print " | Status   : " + issue.fields.status.name
        print " | "
        if hasattr(issue.fields, 'parent'):
            print " | Parent   : " + issue.fields.parent.key + " - " + issue.fields.parent.fields.summary
            print " | "
        print " | Summary  : " + issue.fields.summary
        print " | Assigee  : " + issue.fields.assignee.displayName
        print " | Reporter : " + issue.fields.reporter.displayName
        print " `------------------------------------------------------------------------------"
        print " "

        # Clean story name
        story_name = re.sub(r"[^\w\s]", '', story_name)
        story_name = re.sub(r"\s+", '-', story_name)
        story_name = story_name.lower()

        # Replace patterns in branch name
        branch = branch.replace('%(issue_id)', str(issue_id))
        branch = branch.replace('%(story_name)', story_name)
    except Exception, e:
        print "Error occured, are you sure your config, or issue is correct?"
        sys.exit(4)

    # Create feature branch and get return code
    return_code = subprocess.call('git checkout -b ' + branch, shell=True)
    subprocess.call('git push --set-upstream origin ' + branch, shell=True)

    # Return git flow return code
    return return_code

if __name__ == "__main__":
    main(sys.argv[1:])
